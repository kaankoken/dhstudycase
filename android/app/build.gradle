def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 32
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        multiDexEnabled true
        minSdkVersion 26
        targetSdkVersion 32
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            applicationId "com.legolas.dhstudycase.dev"
            resValue "string", "app_name", "DH Study Case Dev"
        }
        prod {
            dimension "app"
            applicationId "com.legolas.dhstudycase"
            resValue "string", "app_name", "DH Study Case"
        }
    }

    signingConfigs {
        release {
            // keyAlias "keystoreProperties['keyAlias']"
            // keyPassword "keystoreProperties['keyPassword']"
            // storeFile "keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null"
            // storePassword "keystoreProperties['storePassword']"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' 
            signingConfig signingConfigs.release
            
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
